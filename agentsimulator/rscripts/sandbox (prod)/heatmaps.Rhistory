      }
      if (sd(final_LS_wealth) > 0) {
         Sharpe_LS[e,i] = mean(final_LS_wealth)/sd(final_LS_wealth)
      }
   }   
}
mean_Sharpe <- (Sharpe_FUND + Sharpe_TREND + Sharpe_LS)/3
sharpe_avg_A1[set,] <- mean_Sharpe[,1]
sharpe_avg_A2[set,] <- mean_Sharpe[,2]
# ... Agents' VaR ... #
FUNDvar_avg <- array(0, dim=c(1, nExp))
TRENDvar_avg <- array(0, dim=c(1, nExp))
LSvar_avg <- array(0, dim=c(1, nExp))
for (k in seq(from=0, to=nExp-1)) {       # Averages the Hill index of log-returns obtained on each run
   for (j in seq(from=1, to=nRuns)) {
      FUNDvar_avg[1,k+1] <- FUNDvar_avg[1,k+1] + mean(tsFUNDvar[[1+j+k*nRuns]])
      TRENDvar_avg[1,k+1] <- TRENDvar_avg[1,k+1] + mean(tsTRENDvar[[1+j+k*nRuns]])
      LSvar_avg[1,k+1] <- LSvar_avg[1,k+1] + mean(tsLSvar[[1+j+k*nRuns]])
   }
   FUNDvar_avg[1,k+1] <- FUNDvar_avg[1,k+1]/nRuns
   TRENDvar_avg[1,k+1] <- TRENDvar_avg[1,k+1]/nRuns
   LSvar_avg[1,k+1] <- LSvar_avg[1,k+1]/nRuns
}
mean_var <- (FUNDvar_avg + TRENDvar_avg + LSvar_avg)/3
var_avg[set,] <- mean_var[1,]
################################## COPY TILL HERE ###############################################
var_avg
set = 18     # Indicate the number of experiments set, to allocate results in the correct row of the arrays
# ------ Read data from csv files for each experiment ------ #
tsprices <- read.table(paste(home.dir,"list_price_timeseries_E0.csv",sep=""),
   header=TRUE, sep=",", na.strings="NA", dec=".", strip.white=TRUE)
tsFUNDwealth <- read.table(paste(home.dir,"list_fundwealth_timeseries_E0.csv",sep=""),
   header=TRUE, sep=",", na.strings="NA", dec=".", strip.white=TRUE)
tsTRENDwealth <- read.table(paste(home.dir,"list_trendwealth_timeseries_E0.csv",sep=""),
   header=TRUE, sep=",", na.strings="NA", dec=".", strip.white=TRUE)
tsLSwealth <- read.table(paste(home.dir,"list_lswealth_timeseries_E0.csv",sep=""),
   header=TRUE, sep=",", na.strings="NA", dec=".", strip.white=TRUE)
tsFUNDvar <- read.table(paste(home.dir,"list_fundvar_timeseries_E0.csv",sep=""),
   header=TRUE, sep=",", na.strings="NA", dec=".", strip.white=TRUE)
tsTRENDvar <- read.table(paste(home.dir,"list_trendvar_timeseries_E0.csv",sep=""),
   header=TRUE, sep=",", na.strings="NA", dec=".", strip.white=TRUE)
tsLSvar <- read.table(paste(home.dir,"list_lsvar_timeseries_E0.csv",sep=""),
   header=TRUE, sep=",", na.strings="NA", dec=".", strip.white=TRUE)
if (nExp > 1) {   # Read data for single experiments and merge them
   for (e in seq(from=1, to=nExp-1)) {
      tsprices_exp <- read.table(paste(home.dir, paste("list_price_timeseries_E",e,".csv", sep=""), sep=""),
         header=TRUE, sep=",", na.strings="NA", dec=".", strip.white=TRUE)
      tsprices <- merge(tsprices, tsprices_exp, by="tick")
      tsFUNDwealth_exp <- read.table(paste(home.dir, paste("list_fundwealth_timeseries_E",e,".csv", sep=""), sep=""),
         header=TRUE, sep=",", na.strings="NA", dec=".", strip.white=TRUE)
      tsFUNDwealth <- merge(tsFUNDwealth, tsFUNDwealth_exp, by="tick")
      tsTRENDwealth_exp <- read.table(paste(home.dir, paste("list_trendwealth_timeseries_E",e,".csv", sep=""), sep=""),
         header=TRUE, sep=",", na.strings="NA", dec=".", strip.white=TRUE)
      tsTRENDwealth <- merge(tsTRENDwealth, tsTRENDwealth_exp, by="tick")
      tsLSwealth_exp <- read.table(paste(home.dir, paste("list_lswealth_timeseries_E",e,".csv", sep=""), sep=""),
         header=TRUE, sep=",", na.strings="NA", dec=".", strip.white=TRUE)
      tsLSwealth <- merge(tsLSwealth, tsLSwealth_exp, by="tick")
      tsFUNDvar_exp <- read.table(paste(home.dir, paste("list_fundvar_timeseries_E",e,".csv", sep=""), sep=""),
         header=TRUE, sep=",", na.strings="NA", dec=".", strip.white=TRUE)
      tsFUNDvar <- merge(tsFUNDvar, tsFUNDvar_exp, by="tick")
      tsTRENDvar_exp <- read.table(paste(home.dir, paste("list_trendvar_timeseries_E",e,".csv", sep=""), sep=""),
         header=TRUE, sep=",", na.strings="NA", dec=".", strip.white=TRUE)
      tsTRENDvar <- merge(tsTRENDvar, tsTRENDvar_exp, by="tick")
      tsLSvar_exp <- read.table(paste(home.dir, paste("list_lsvar_timeseries_E",e,".csv", sep=""), sep=""),
         header=TRUE, sep=",", na.strings="NA", dec=".", strip.white=TRUE)
      tsLSvar <- merge(tsLSvar, tsLSvar_exp, by="tick")
   }
}
# ------ Calculate logarithmic prices (for returns) and values ------ #
tslogprices <- log(tsprices)
tslogprices[[1]] <- tsprices[[1]]  # The 'tick' column must not change
# ------ CALCULATE INSTABILITY INDICATORS ------ #
# ... Volatility of prices ... #
vol_avg <- array(0, dim=c(1, nAssets*nExp))    # Averages the volatility of prices obtained on each run
for (k in seq(from=0, to=nExp-1)) {
   for (i in seq(from=1, to=nAssets)) {
      for (j in seq(from=0, to=nRuns-1)) {
         vol_avg[,i+k*nAssets] <- vol_avg[,i+k*nAssets] + sd(tsprices[[i+1+j*nAssets+k*nAssets*nRuns]], na.rm = FALSE)
      }
      vol_avg[,i+k*nAssets] <- vol_avg[,i+k*nAssets]/nRuns
   }
}
volatility_p_avg_A1[set,] <- vol_avg[,seq(from=1, to=(nExp-1)*nAssets+1, by=nAssets)]
volatility_p_avg_A2[set,] <- vol_avg[,seq(from=2, to=(nExp-1)*nAssets+2, by=nAssets)]
# ... Volatility of returns ... #
vol_avg <- array(0, dim=c(1, nAssets*nExp))    # Averages the volatility of returns obtained on each run
for (k in seq(from=0, to=nExp-1)) {
   for (i in seq(from=1, to=nAssets)) {
      for (j in seq(from=0, to=nRuns-1)) {
         vol_avg[,i+k*nAssets] <- vol_avg[,i+k*nAssets] + sd(diff(tslogprices[[i+1+j*nAssets+k*nAssets*nRuns]]), na.rm = FALSE)
      }
      vol_avg[,i+k*nAssets] <- vol_avg[,i+k*nAssets]/nRuns
   }
}
vol_avg <- vol_avg * sqrt(252)  # annualise volatility
volatility_ret_avg_A1[set,] <- vol_avg[,seq(from=1, to=(nExp-1)*nAssets+1, by=nAssets)]
volatility_ret_avg_A2[set,] <- vol_avg[,seq(from=2, to=(nExp-1)*nAssets+2, by=nAssets)]
# ... Return kurtosis ... #
kurt_avg <- array(0, dim=c(1, nAssets*nExp))    # Averages the kurtosis of log-returns obtained on each run
for (k in seq(from=0, to=nExp-1)) {
   for (i in seq(from=1, to=nAssets)) {
      for (j in seq(from=0, to=nRuns-1)) {
         kurt_avg[,i+k*nAssets] <- kurt_avg[,i+k*nAssets] + kurtosis(diff(tslogprices[[i+1+j*nAssets+k*nAssets*nRuns]]), na.rm = FALSE, method="excess")[1]
      }
      kurt_avg[,i+k*nAssets] <- kurt_avg[,i+k*nAssets]/nRuns
   }
}
kurtosis_ret_avg_A1[set,] <- kurt_avg[,seq(from=1, to=(nExp-1)*nAssets+1, by=nAssets)]
kurtosis_ret_avg_A2[set,] <- kurt_avg[,seq(from=2, to=(nExp-1)*nAssets+2, by=nAssets)]
# ... Hill index of returns ... #
hillreturns <- array(0, dim=c(1, nAssets*nExp*nRuns))
hillreturns_avg <- array(0, dim=c(1, nAssets*nExp))
sample_size = 0.1 * nTicks
for (j in seq(from=1, to=nAssets*nExp*nRuns)) {
   hillreturns[1,j] <- hill(diff(tslogprices[[1+j]]), option = "alpha", end = sample_size, p = NA)$y[1]
}
for (k in seq(from=0, to=nExp-1)) {       # Averages the Hill index of log-returns obtained on each run
   for (i in seq(from=1, to=nAssets)) {
      for (j in seq(from=0, to=nRuns-1)) {
         hillreturns_avg[1,i+k*nAssets] <- hillreturns_avg[1,i+k*nAssets] + hillreturns[1,i+j*nAssets+k*nAssets*nRuns]
      }
      hillreturns_avg[1,i+k*nAssets] <- hillreturns_avg[1,i+k*nAssets]/nRuns
   }
}
hill_ret_avg_A1[set,] <- hillreturns_avg[,seq(from=1, to=(nExp-1)*nAssets+1, by=nAssets)]
hill_ret_avg_A2[set,] <- hillreturns_avg[,seq(from=2, to=(nExp-1)*nAssets+2, by=nAssets)]
# ... Sharpe ratio of agents' wealth (strength indicator) ... #
Sharpe_FUND <- array(0, dim=c(nExp, nAssets))   # Array to store the Sharpe ratio for each asset and experiment
Sharpe_TREND <- array(0, dim=c(nExp, nAssets))
Sharpe_LS <- array(0, dim=c(nExp, nAssets))
par(mfrow=c(nAssets,1), mar=c(3,4,3,1), oma=c(3,3,5,3))
for (i in seq(from=1, to=nAssets)) {
   for (e in seq(from=1, to=nExp)) {
      final_FUND_wealth <- rep(0, nRuns)   # Vectors to store final wealth for each run
      final_TREND_wealth <- rep(0, nRuns)
      final_LS_wealth <- rep(0, nRuns)
      for (j in seq(from=0, to=nRuns-1)) {
         final_FUND_wealth[j+1] = tsFUNDwealth[nTicks, 1+i+j*nAssets+(e-1)*nAssets*nRuns]
         final_TREND_wealth[j+1] = tsTRENDwealth[nTicks, 1+i+j*nAssets+(e-1)*nAssets*nRuns]
         final_LS_wealth[j+1] = tsLSwealth[nTicks, 1+i+j*nAssets+(e-1)*nAssets*nRuns]
      }
      if (sd(final_FUND_wealth) > 0) {
         Sharpe_FUND[e,i] = mean(final_FUND_wealth)/sd(final_FUND_wealth)
      }
      if (sd(final_TREND_wealth) > 0) {
         Sharpe_TREND[e,i] = mean(final_TREND_wealth)/sd(final_TREND_wealth)
      }
      if (sd(final_LS_wealth) > 0) {
         Sharpe_LS[e,i] = mean(final_LS_wealth)/sd(final_LS_wealth)
      }
   }   
}
mean_Sharpe <- (Sharpe_FUND + Sharpe_TREND + Sharpe_LS)/3
sharpe_avg_A1[set,] <- mean_Sharpe[,1]
sharpe_avg_A2[set,] <- mean_Sharpe[,2]
# ... Agents' VaR ... #
FUNDvar_avg <- array(0, dim=c(1, nExp))
TRENDvar_avg <- array(0, dim=c(1, nExp))
LSvar_avg <- array(0, dim=c(1, nExp))
for (k in seq(from=0, to=nExp-1)) {       # Averages the Hill index of log-returns obtained on each run
   for (j in seq(from=1, to=nRuns)) {
      FUNDvar_avg[1,k+1] <- FUNDvar_avg[1,k+1] + mean(tsFUNDvar[[1+j+k*nRuns]])
      TRENDvar_avg[1,k+1] <- TRENDvar_avg[1,k+1] + mean(tsTRENDvar[[1+j+k*nRuns]])
      LSvar_avg[1,k+1] <- LSvar_avg[1,k+1] + mean(tsLSvar[[1+j+k*nRuns]])
   }
   FUNDvar_avg[1,k+1] <- FUNDvar_avg[1,k+1]/nRuns
   TRENDvar_avg[1,k+1] <- TRENDvar_avg[1,k+1]/nRuns
   LSvar_avg[1,k+1] <- LSvar_avg[1,k+1]/nRuns
}
mean_var <- (FUNDvar_avg + TRENDvar_avg + LSvar_avg)/3
var_avg[set,] <- mean_var[1,]
################################## COPY TILL HERE ###############################################
var_avg
set = 19     # Indicate the number of experiments set, to allocate results in the correct row of the arrays
# ------ Read data from csv files for each experiment ------ #
tsprices <- read.table(paste(home.dir,"list_price_timeseries_E0.csv",sep=""),
   header=TRUE, sep=",", na.strings="NA", dec=".", strip.white=TRUE)
tsFUNDwealth <- read.table(paste(home.dir,"list_fundwealth_timeseries_E0.csv",sep=""),
   header=TRUE, sep=",", na.strings="NA", dec=".", strip.white=TRUE)
tsTRENDwealth <- read.table(paste(home.dir,"list_trendwealth_timeseries_E0.csv",sep=""),
   header=TRUE, sep=",", na.strings="NA", dec=".", strip.white=TRUE)
tsLSwealth <- read.table(paste(home.dir,"list_lswealth_timeseries_E0.csv",sep=""),
   header=TRUE, sep=",", na.strings="NA", dec=".", strip.white=TRUE)
tsFUNDvar <- read.table(paste(home.dir,"list_fundvar_timeseries_E0.csv",sep=""),
   header=TRUE, sep=",", na.strings="NA", dec=".", strip.white=TRUE)
tsTRENDvar <- read.table(paste(home.dir,"list_trendvar_timeseries_E0.csv",sep=""),
   header=TRUE, sep=",", na.strings="NA", dec=".", strip.white=TRUE)
tsLSvar <- read.table(paste(home.dir,"list_lsvar_timeseries_E0.csv",sep=""),
   header=TRUE, sep=",", na.strings="NA", dec=".", strip.white=TRUE)
if (nExp > 1) {   # Read data for single experiments and merge them
   for (e in seq(from=1, to=nExp-1)) {
      tsprices_exp <- read.table(paste(home.dir, paste("list_price_timeseries_E",e,".csv", sep=""), sep=""),
         header=TRUE, sep=",", na.strings="NA", dec=".", strip.white=TRUE)
      tsprices <- merge(tsprices, tsprices_exp, by="tick")
      tsFUNDwealth_exp <- read.table(paste(home.dir, paste("list_fundwealth_timeseries_E",e,".csv", sep=""), sep=""),
         header=TRUE, sep=",", na.strings="NA", dec=".", strip.white=TRUE)
      tsFUNDwealth <- merge(tsFUNDwealth, tsFUNDwealth_exp, by="tick")
      tsTRENDwealth_exp <- read.table(paste(home.dir, paste("list_trendwealth_timeseries_E",e,".csv", sep=""), sep=""),
         header=TRUE, sep=",", na.strings="NA", dec=".", strip.white=TRUE)
      tsTRENDwealth <- merge(tsTRENDwealth, tsTRENDwealth_exp, by="tick")
      tsLSwealth_exp <- read.table(paste(home.dir, paste("list_lswealth_timeseries_E",e,".csv", sep=""), sep=""),
         header=TRUE, sep=",", na.strings="NA", dec=".", strip.white=TRUE)
      tsLSwealth <- merge(tsLSwealth, tsLSwealth_exp, by="tick")
      tsFUNDvar_exp <- read.table(paste(home.dir, paste("list_fundvar_timeseries_E",e,".csv", sep=""), sep=""),
         header=TRUE, sep=",", na.strings="NA", dec=".", strip.white=TRUE)
      tsFUNDvar <- merge(tsFUNDvar, tsFUNDvar_exp, by="tick")
      tsTRENDvar_exp <- read.table(paste(home.dir, paste("list_trendvar_timeseries_E",e,".csv", sep=""), sep=""),
         header=TRUE, sep=",", na.strings="NA", dec=".", strip.white=TRUE)
      tsTRENDvar <- merge(tsTRENDvar, tsTRENDvar_exp, by="tick")
      tsLSvar_exp <- read.table(paste(home.dir, paste("list_lsvar_timeseries_E",e,".csv", sep=""), sep=""),
         header=TRUE, sep=",", na.strings="NA", dec=".", strip.white=TRUE)
      tsLSvar <- merge(tsLSvar, tsLSvar_exp, by="tick")
   }
}
# ------ Calculate logarithmic prices (for returns) and values ------ #
tslogprices <- log(tsprices)
tslogprices[[1]] <- tsprices[[1]]  # The 'tick' column must not change
# ------ CALCULATE INSTABILITY INDICATORS ------ #
# ... Volatility of prices ... #
vol_avg <- array(0, dim=c(1, nAssets*nExp))    # Averages the volatility of prices obtained on each run
for (k in seq(from=0, to=nExp-1)) {
   for (i in seq(from=1, to=nAssets)) {
      for (j in seq(from=0, to=nRuns-1)) {
         vol_avg[,i+k*nAssets] <- vol_avg[,i+k*nAssets] + sd(tsprices[[i+1+j*nAssets+k*nAssets*nRuns]], na.rm = FALSE)
      }
      vol_avg[,i+k*nAssets] <- vol_avg[,i+k*nAssets]/nRuns
   }
}
volatility_p_avg_A1[set,] <- vol_avg[,seq(from=1, to=(nExp-1)*nAssets+1, by=nAssets)]
volatility_p_avg_A2[set,] <- vol_avg[,seq(from=2, to=(nExp-1)*nAssets+2, by=nAssets)]
# ... Volatility of returns ... #
vol_avg <- array(0, dim=c(1, nAssets*nExp))    # Averages the volatility of returns obtained on each run
for (k in seq(from=0, to=nExp-1)) {
   for (i in seq(from=1, to=nAssets)) {
      for (j in seq(from=0, to=nRuns-1)) {
         vol_avg[,i+k*nAssets] <- vol_avg[,i+k*nAssets] + sd(diff(tslogprices[[i+1+j*nAssets+k*nAssets*nRuns]]), na.rm = FALSE)
      }
      vol_avg[,i+k*nAssets] <- vol_avg[,i+k*nAssets]/nRuns
   }
}
vol_avg <- vol_avg * sqrt(252)  # annualise volatility
volatility_ret_avg_A1[set,] <- vol_avg[,seq(from=1, to=(nExp-1)*nAssets+1, by=nAssets)]
volatility_ret_avg_A2[set,] <- vol_avg[,seq(from=2, to=(nExp-1)*nAssets+2, by=nAssets)]
# ... Return kurtosis ... #
kurt_avg <- array(0, dim=c(1, nAssets*nExp))    # Averages the kurtosis of log-returns obtained on each run
for (k in seq(from=0, to=nExp-1)) {
   for (i in seq(from=1, to=nAssets)) {
      for (j in seq(from=0, to=nRuns-1)) {
         kurt_avg[,i+k*nAssets] <- kurt_avg[,i+k*nAssets] + kurtosis(diff(tslogprices[[i+1+j*nAssets+k*nAssets*nRuns]]), na.rm = FALSE, method="excess")[1]
      }
      kurt_avg[,i+k*nAssets] <- kurt_avg[,i+k*nAssets]/nRuns
   }
}
kurtosis_ret_avg_A1[set,] <- kurt_avg[,seq(from=1, to=(nExp-1)*nAssets+1, by=nAssets)]
kurtosis_ret_avg_A2[set,] <- kurt_avg[,seq(from=2, to=(nExp-1)*nAssets+2, by=nAssets)]
# ... Hill index of returns ... #
hillreturns <- array(0, dim=c(1, nAssets*nExp*nRuns))
hillreturns_avg <- array(0, dim=c(1, nAssets*nExp))
sample_size = 0.1 * nTicks
for (j in seq(from=1, to=nAssets*nExp*nRuns)) {
   hillreturns[1,j] <- hill(diff(tslogprices[[1+j]]), option = "alpha", end = sample_size, p = NA)$y[1]
}
for (k in seq(from=0, to=nExp-1)) {       # Averages the Hill index of log-returns obtained on each run
   for (i in seq(from=1, to=nAssets)) {
      for (j in seq(from=0, to=nRuns-1)) {
         hillreturns_avg[1,i+k*nAssets] <- hillreturns_avg[1,i+k*nAssets] + hillreturns[1,i+j*nAssets+k*nAssets*nRuns]
      }
      hillreturns_avg[1,i+k*nAssets] <- hillreturns_avg[1,i+k*nAssets]/nRuns
   }
}
hill_ret_avg_A1[set,] <- hillreturns_avg[,seq(from=1, to=(nExp-1)*nAssets+1, by=nAssets)]
hill_ret_avg_A2[set,] <- hillreturns_avg[,seq(from=2, to=(nExp-1)*nAssets+2, by=nAssets)]
# ... Sharpe ratio of agents' wealth (strength indicator) ... #
Sharpe_FUND <- array(0, dim=c(nExp, nAssets))   # Array to store the Sharpe ratio for each asset and experiment
Sharpe_TREND <- array(0, dim=c(nExp, nAssets))
Sharpe_LS <- array(0, dim=c(nExp, nAssets))
par(mfrow=c(nAssets,1), mar=c(3,4,3,1), oma=c(3,3,5,3))
for (i in seq(from=1, to=nAssets)) {
   for (e in seq(from=1, to=nExp)) {
      final_FUND_wealth <- rep(0, nRuns)   # Vectors to store final wealth for each run
      final_TREND_wealth <- rep(0, nRuns)
      final_LS_wealth <- rep(0, nRuns)
      for (j in seq(from=0, to=nRuns-1)) {
         final_FUND_wealth[j+1] = tsFUNDwealth[nTicks, 1+i+j*nAssets+(e-1)*nAssets*nRuns]
         final_TREND_wealth[j+1] = tsTRENDwealth[nTicks, 1+i+j*nAssets+(e-1)*nAssets*nRuns]
         final_LS_wealth[j+1] = tsLSwealth[nTicks, 1+i+j*nAssets+(e-1)*nAssets*nRuns]
      }
      if (sd(final_FUND_wealth) > 0) {
         Sharpe_FUND[e,i] = mean(final_FUND_wealth)/sd(final_FUND_wealth)
      }
      if (sd(final_TREND_wealth) > 0) {
         Sharpe_TREND[e,i] = mean(final_TREND_wealth)/sd(final_TREND_wealth)
      }
      if (sd(final_LS_wealth) > 0) {
         Sharpe_LS[e,i] = mean(final_LS_wealth)/sd(final_LS_wealth)
      }
   }   
}
mean_Sharpe <- (Sharpe_FUND + Sharpe_TREND + Sharpe_LS)/3
sharpe_avg_A1[set,] <- mean_Sharpe[,1]
sharpe_avg_A2[set,] <- mean_Sharpe[,2]
# ... Agents' VaR ... #
FUNDvar_avg <- array(0, dim=c(1, nExp))
TRENDvar_avg <- array(0, dim=c(1, nExp))
LSvar_avg <- array(0, dim=c(1, nExp))
for (k in seq(from=0, to=nExp-1)) {       # Averages the Hill index of log-returns obtained on each run
   for (j in seq(from=1, to=nRuns)) {
      FUNDvar_avg[1,k+1] <- FUNDvar_avg[1,k+1] + mean(tsFUNDvar[[1+j+k*nRuns]])
      TRENDvar_avg[1,k+1] <- TRENDvar_avg[1,k+1] + mean(tsTRENDvar[[1+j+k*nRuns]])
      LSvar_avg[1,k+1] <- LSvar_avg[1,k+1] + mean(tsLSvar[[1+j+k*nRuns]])
   }
   FUNDvar_avg[1,k+1] <- FUNDvar_avg[1,k+1]/nRuns
   TRENDvar_avg[1,k+1] <- TRENDvar_avg[1,k+1]/nRuns
   LSvar_avg[1,k+1] <- LSvar_avg[1,k+1]/nRuns
}
mean_var <- (FUNDvar_avg + TRENDvar_avg + LSvar_avg)/3
var_avg[set,] <- mean_var[1,]
################################## COPY TILL HERE ###############################################
set = 20     # Indicate the number of experiments set, to allocate results in the correct row of the arrays
# ------ Read data from csv files for each experiment ------ #
tsprices <- read.table(paste(home.dir,"list_price_timeseries_E0.csv",sep=""),
   header=TRUE, sep=",", na.strings="NA", dec=".", strip.white=TRUE)
tsFUNDwealth <- read.table(paste(home.dir,"list_fundwealth_timeseries_E0.csv",sep=""),
   header=TRUE, sep=",", na.strings="NA", dec=".", strip.white=TRUE)
tsTRENDwealth <- read.table(paste(home.dir,"list_trendwealth_timeseries_E0.csv",sep=""),
   header=TRUE, sep=",", na.strings="NA", dec=".", strip.white=TRUE)
tsLSwealth <- read.table(paste(home.dir,"list_lswealth_timeseries_E0.csv",sep=""),
   header=TRUE, sep=",", na.strings="NA", dec=".", strip.white=TRUE)
tsFUNDvar <- read.table(paste(home.dir,"list_fundvar_timeseries_E0.csv",sep=""),
   header=TRUE, sep=",", na.strings="NA", dec=".", strip.white=TRUE)
tsTRENDvar <- read.table(paste(home.dir,"list_trendvar_timeseries_E0.csv",sep=""),
   header=TRUE, sep=",", na.strings="NA", dec=".", strip.white=TRUE)
tsLSvar <- read.table(paste(home.dir,"list_lsvar_timeseries_E0.csv",sep=""),
   header=TRUE, sep=",", na.strings="NA", dec=".", strip.white=TRUE)
if (nExp > 1) {   # Read data for single experiments and merge them
   for (e in seq(from=1, to=nExp-1)) {
      tsprices_exp <- read.table(paste(home.dir, paste("list_price_timeseries_E",e,".csv", sep=""), sep=""),
         header=TRUE, sep=",", na.strings="NA", dec=".", strip.white=TRUE)
      tsprices <- merge(tsprices, tsprices_exp, by="tick")
      tsFUNDwealth_exp <- read.table(paste(home.dir, paste("list_fundwealth_timeseries_E",e,".csv", sep=""), sep=""),
         header=TRUE, sep=",", na.strings="NA", dec=".", strip.white=TRUE)
      tsFUNDwealth <- merge(tsFUNDwealth, tsFUNDwealth_exp, by="tick")
      tsTRENDwealth_exp <- read.table(paste(home.dir, paste("list_trendwealth_timeseries_E",e,".csv", sep=""), sep=""),
         header=TRUE, sep=",", na.strings="NA", dec=".", strip.white=TRUE)
      tsTRENDwealth <- merge(tsTRENDwealth, tsTRENDwealth_exp, by="tick")
      tsLSwealth_exp <- read.table(paste(home.dir, paste("list_lswealth_timeseries_E",e,".csv", sep=""), sep=""),
         header=TRUE, sep=",", na.strings="NA", dec=".", strip.white=TRUE)
      tsLSwealth <- merge(tsLSwealth, tsLSwealth_exp, by="tick")
      tsFUNDvar_exp <- read.table(paste(home.dir, paste("list_fundvar_timeseries_E",e,".csv", sep=""), sep=""),
         header=TRUE, sep=",", na.strings="NA", dec=".", strip.white=TRUE)
      tsFUNDvar <- merge(tsFUNDvar, tsFUNDvar_exp, by="tick")
      tsTRENDvar_exp <- read.table(paste(home.dir, paste("list_trendvar_timeseries_E",e,".csv", sep=""), sep=""),
         header=TRUE, sep=",", na.strings="NA", dec=".", strip.white=TRUE)
      tsTRENDvar <- merge(tsTRENDvar, tsTRENDvar_exp, by="tick")
      tsLSvar_exp <- read.table(paste(home.dir, paste("list_lsvar_timeseries_E",e,".csv", sep=""), sep=""),
         header=TRUE, sep=",", na.strings="NA", dec=".", strip.white=TRUE)
      tsLSvar <- merge(tsLSvar, tsLSvar_exp, by="tick")
   }
}
# ------ Calculate logarithmic prices (for returns) and values ------ #
tslogprices <- log(tsprices)
tslogprices[[1]] <- tsprices[[1]]  # The 'tick' column must not change
# ------ CALCULATE INSTABILITY INDICATORS ------ #
# ... Volatility of prices ... #
vol_avg <- array(0, dim=c(1, nAssets*nExp))    # Averages the volatility of prices obtained on each run
for (k in seq(from=0, to=nExp-1)) {
   for (i in seq(from=1, to=nAssets)) {
      for (j in seq(from=0, to=nRuns-1)) {
         vol_avg[,i+k*nAssets] <- vol_avg[,i+k*nAssets] + sd(tsprices[[i+1+j*nAssets+k*nAssets*nRuns]], na.rm = FALSE)
      }
      vol_avg[,i+k*nAssets] <- vol_avg[,i+k*nAssets]/nRuns
   }
}
volatility_p_avg_A1[set,] <- vol_avg[,seq(from=1, to=(nExp-1)*nAssets+1, by=nAssets)]
volatility_p_avg_A2[set,] <- vol_avg[,seq(from=2, to=(nExp-1)*nAssets+2, by=nAssets)]
# ... Volatility of returns ... #
vol_avg <- array(0, dim=c(1, nAssets*nExp))    # Averages the volatility of returns obtained on each run
for (k in seq(from=0, to=nExp-1)) {
   for (i in seq(from=1, to=nAssets)) {
      for (j in seq(from=0, to=nRuns-1)) {
         vol_avg[,i+k*nAssets] <- vol_avg[,i+k*nAssets] + sd(diff(tslogprices[[i+1+j*nAssets+k*nAssets*nRuns]]), na.rm = FALSE)
      }
      vol_avg[,i+k*nAssets] <- vol_avg[,i+k*nAssets]/nRuns
   }
}
vol_avg <- vol_avg * sqrt(252)  # annualise volatility
volatility_ret_avg_A1[set,] <- vol_avg[,seq(from=1, to=(nExp-1)*nAssets+1, by=nAssets)]
volatility_ret_avg_A2[set,] <- vol_avg[,seq(from=2, to=(nExp-1)*nAssets+2, by=nAssets)]
# ... Return kurtosis ... #
kurt_avg <- array(0, dim=c(1, nAssets*nExp))    # Averages the kurtosis of log-returns obtained on each run
for (k in seq(from=0, to=nExp-1)) {
   for (i in seq(from=1, to=nAssets)) {
      for (j in seq(from=0, to=nRuns-1)) {
         kurt_avg[,i+k*nAssets] <- kurt_avg[,i+k*nAssets] + kurtosis(diff(tslogprices[[i+1+j*nAssets+k*nAssets*nRuns]]), na.rm = FALSE, method="excess")[1]
      }
      kurt_avg[,i+k*nAssets] <- kurt_avg[,i+k*nAssets]/nRuns
   }
}
kurtosis_ret_avg_A1[set,] <- kurt_avg[,seq(from=1, to=(nExp-1)*nAssets+1, by=nAssets)]
kurtosis_ret_avg_A2[set,] <- kurt_avg[,seq(from=2, to=(nExp-1)*nAssets+2, by=nAssets)]
# ... Hill index of returns ... #
hillreturns <- array(0, dim=c(1, nAssets*nExp*nRuns))
hillreturns_avg <- array(0, dim=c(1, nAssets*nExp))
sample_size = 0.1 * nTicks
for (j in seq(from=1, to=nAssets*nExp*nRuns)) {
   hillreturns[1,j] <- hill(diff(tslogprices[[1+j]]), option = "alpha", end = sample_size, p = NA)$y[1]
}
for (k in seq(from=0, to=nExp-1)) {       # Averages the Hill index of log-returns obtained on each run
   for (i in seq(from=1, to=nAssets)) {
      for (j in seq(from=0, to=nRuns-1)) {
         hillreturns_avg[1,i+k*nAssets] <- hillreturns_avg[1,i+k*nAssets] + hillreturns[1,i+j*nAssets+k*nAssets*nRuns]
      }
      hillreturns_avg[1,i+k*nAssets] <- hillreturns_avg[1,i+k*nAssets]/nRuns
   }
}
hill_ret_avg_A1[set,] <- hillreturns_avg[,seq(from=1, to=(nExp-1)*nAssets+1, by=nAssets)]
hill_ret_avg_A2[set,] <- hillreturns_avg[,seq(from=2, to=(nExp-1)*nAssets+2, by=nAssets)]
# ... Sharpe ratio of agents' wealth (strength indicator) ... #
Sharpe_FUND <- array(0, dim=c(nExp, nAssets))   # Array to store the Sharpe ratio for each asset and experiment
Sharpe_TREND <- array(0, dim=c(nExp, nAssets))
Sharpe_LS <- array(0, dim=c(nExp, nAssets))
par(mfrow=c(nAssets,1), mar=c(3,4,3,1), oma=c(3,3,5,3))
for (i in seq(from=1, to=nAssets)) {
   for (e in seq(from=1, to=nExp)) {
      final_FUND_wealth <- rep(0, nRuns)   # Vectors to store final wealth for each run
      final_TREND_wealth <- rep(0, nRuns)
      final_LS_wealth <- rep(0, nRuns)
      for (j in seq(from=0, to=nRuns-1)) {
         final_FUND_wealth[j+1] = tsFUNDwealth[nTicks, 1+i+j*nAssets+(e-1)*nAssets*nRuns]
         final_TREND_wealth[j+1] = tsTRENDwealth[nTicks, 1+i+j*nAssets+(e-1)*nAssets*nRuns]
         final_LS_wealth[j+1] = tsLSwealth[nTicks, 1+i+j*nAssets+(e-1)*nAssets*nRuns]
      }
      if (sd(final_FUND_wealth) > 0) {
         Sharpe_FUND[e,i] = mean(final_FUND_wealth)/sd(final_FUND_wealth)
      }
      if (sd(final_TREND_wealth) > 0) {
         Sharpe_TREND[e,i] = mean(final_TREND_wealth)/sd(final_TREND_wealth)
      }
      if (sd(final_LS_wealth) > 0) {
         Sharpe_LS[e,i] = mean(final_LS_wealth)/sd(final_LS_wealth)
      }
   }   
}
mean_Sharpe <- (Sharpe_FUND + Sharpe_TREND + Sharpe_LS)/3
sharpe_avg_A1[set,] <- mean_Sharpe[,1]
sharpe_avg_A2[set,] <- mean_Sharpe[,2]
# ... Agents' VaR ... #
FUNDvar_avg <- array(0, dim=c(1, nExp))
TRENDvar_avg <- array(0, dim=c(1, nExp))
LSvar_avg <- array(0, dim=c(1, nExp))
for (k in seq(from=0, to=nExp-1)) {       # Averages the Hill index of log-returns obtained on each run
   for (j in seq(from=1, to=nRuns)) {
      FUNDvar_avg[1,k+1] <- FUNDvar_avg[1,k+1] + mean(tsFUNDvar[[1+j+k*nRuns]])
      TRENDvar_avg[1,k+1] <- TRENDvar_avg[1,k+1] + mean(tsTRENDvar[[1+j+k*nRuns]])
      LSvar_avg[1,k+1] <- LSvar_avg[1,k+1] + mean(tsLSvar[[1+j+k*nRuns]])
   }
   FUNDvar_avg[1,k+1] <- FUNDvar_avg[1,k+1]/nRuns
   TRENDvar_avg[1,k+1] <- TRENDvar_avg[1,k+1]/nRuns
   LSvar_avg[1,k+1] <- LSvar_avg[1,k+1]/nRuns
}
mean_var <- (FUNDvar_avg + TRENDvar_avg + LSvar_avg)/3
var_avg[set,] <- mean_var[1,]
################################## COPY TILL HERE ###############################################
volatility_p_avg_A1_const <- volatility_p_avg_A1
volatility_p_avg_A2_const <- volatility_p_avg_A2
volatility_ret_avg_A1_const <- volatility_ret_avg_A1
volatility_ret_avg_A2_const <- volatility_ret_avg_A2
kurtosis_ret_avg_A1_const <- kurtosis_ret_avg_A1
kurtosis_ret_avg_A2_const <- kurtosis_ret_avg_A2
hill_ret_avg_A1_const <- hill_ret_avg_A1
hill_ret_avg_A2_const <- hill_ret_avg_A2
sharpe_avg_A1_const <- sharpe_avg_A1
sharpe_avg_A2_const <- sharpe_avg_A2
var_avg_const <- var_avg
save(var_avg, "var_avg.rds")
saveRDS(var_avg, "var_avg.rds")
a <- readRDS("var_avg.rds")
a
saveRDS(volatility_p_avg_A1_counter, "volatility_p_avg_A1_counter.rds")
saveRDS(volatility_p_avg_A2_counter, "volatility_p_avg_A2_counter.rds")
saveRDS(volatility_ret_avg_A2_counter, "volatility_ret_avg_A2_counter.rds")
saveRDS(volatility_ret_avg_A1_counter, "volatility_ret_avg_A1_counter.rds")
saveRDS(kurtosis_ret_avg_A1_counter, "kurtosis_ret_avg_A1_counter.rds")
saveRDS(kurtosis_ret_avg_A2_counter, "kurtosis_ret_avg_A2_counter.rds")
saveRDS(hill_ret_avg_A1_counter, "hill_ret_avg_A1_counter.rds")
saveRDS(hill_ret_avg_A2_counter, "hill_ret_avg_A2_counter.rds")
saveRDS(sharpe_avg_A1_counter, "sharpe_avg_A1_counter.rds")
saveRDS(sharpe_avg_A2_counter, "sharpe_avg_A2_counter.rds")
saveRDS(var_avg_counter, "var_avg_counter.rds")
saveRDS(volatility_p_avg_A1_stress, "volatility_p_avg_A1_stress.rds")
saveRDS(volatility_p_avg_A2_stress, "volatility_p_avg_A2_stress.rds")
saveRDS(volatility_ret_avg_A2_stress, "volatility_ret_avg_A2_stress.rds")
saveRDS(volatility_ret_avg_A1_stress, "volatility_ret_avg_A1_stress.rds")
saveRDS(kurtosis_ret_avg_A2_stress, "kurtosis_ret_avg_A2_stress.rds")
saveRDS(kurtosis_ret_avg_A1_stress, "kurtosis_ret_avg_A1_stress.rds")
saveRDS(hill_ret_avg_A2_stress, "hill_ret_avg_A2_stress.rds")
saveRDS(hill_ret_avg_A1_stress, "hill_ret_avg_A1_stress.rds")
saveRDS(sharpe_avg_A2_stress, "sharpe_avg_A2_stress.rds")
saveRDS(sharpe_avg_A1_stress, "sharpe_avg_A1_stress.rds")
saveRDS(var_avg_stress, "var_avg_stress.rds")
saveRDS(volatility_p_avg_A1_const, "volatility_p_avg_A1_const.rds")
saveRDS(volatility_p_avg_A2_const, "volatility_p_avg_A2_const.rds")
saveRDS(volatility_ret_avg_A2_const, "volatility_ret_avg_A2_const.rds")
saveRDS(volatility_ret_avg_A1_const, "volatility_ret_avg_A1_const.rds")
saveRDS(kurtosis_ret_avg_A1_const, "kurtosis_ret_avg_A1_const.rds")
saveRDS(kurtosis_ret_avg_A2_const, "kurtosis_ret_avg_A2_const.rds")
saveRDS(hill_ret_avg_A1_const, "hill_ret_avg_A1_const.rds")
saveRDS(hill_ret_avg_A2_const, "hill_ret_avg_A2_const.rds")
saveRDS(sharpe_avg_A1_const, "sharpe_avg_A1_const.rds")
saveRDS(sharpe_avg_A2_const, "sharpe_avg_A2_const.rds")
saveRDS(var_avg_const, "var_avg_const.rds")
save.image("C:\\Users\\llacay\\eclipse\\agentsimulator\\rscripts\\sandbox (prod)\\heatmaps.RData")
