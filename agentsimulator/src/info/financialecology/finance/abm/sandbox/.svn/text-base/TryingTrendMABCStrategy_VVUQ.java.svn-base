/**
 * Simple financial systemic risk simulator for Java
 * http://code.google.com/p/systemic-risk/
 * 
 * Copyright (c) 2011, 2012
 * Gilbert Peffer, CIMNE
 * gilbert.peffer@gmail.com
 * All rights reserved
 *
 * This software is open-source under the BSD license; see 
 * http://code.google.com/p/systemic-risk/wiki/SoftwareLicense
 */
package info.financialecology.finance.abm.sandbox;

import info.financialecology.finance.abm.model.strategy.TrendMABCStrategy_old;
import info.financialecology.finance.abm.model.strategy.TrendMABCStrategy_old.Multiplier;
import info.financialecology.finance.utilities.WorldClock;
import info.financialecology.finance.utilities.datagen.DataGenerator;
import info.financialecology.finance.utilities.datagen.RandomDistDataGenerator;
import info.financialecology.finance.utilities.datagen.RandomGeneratorPool;
import info.financialecology.finance.utilities.datagen.SinusDataGenerator;
import info.financialecology.finance.utilities.datagen.RandomGeneratorPool.DistributionType;
import info.financialecology.finance.utilities.datastruct.DoubleTimeSeries;
import info.financialecology.finance.utilities.datastruct.VersatileChart;
import info.financialecology.finance.utilities.datastruct.VersatileTimeSeries;
import info.financialecology.finance.utilities.datastruct.VersatileTimeSeriesCollection;

import org.jfree.data.time.Day;
import org.slf4j.LoggerFactory;



import cern.colt.Timer;
import cern.colt.list.DoubleArrayList;
import cern.jet.random.*;
import ch.qos.logback.classic.Level;
import ch.qos.logback.classic.Logger;

/**
 * Testing class for TrendMABCStrategy
 * 
 * @author Gilbert Peffer
 *
 */

/**
 * #################################################################################
 * 
 * This class uses an OLD version of TrendMABCStrategy ('TrendMABCStrategy_old').
 *  
 * #################################################################################
 */

public class TryingTrendMABCStrategy_VVUQ {

    /**
     * @param args
     */
    public static void main(String[] args) {
        Timer timerAll  = new Timer();  // a timer to calculate total execution time (cern.colt)
        Timer timer     = new Timer();  // a timer to calculate execution times of particular methods (cern.colt)
        timerAll.start();

        Logger root = (Logger)LoggerFactory.getLogger(Logger.ROOT_LOGGER_NAME);
        root.setLevel(Level.TRACE);
        Logger logger = (Logger)LoggerFactory.getLogger("main");
        
                
        /**
         * ######################################################################################
         * 
         * Trying VVUQ: performance of different multipliers under Brownian motion plus sinus 
         * 
         *    - How does the performance of the strategy depend on the dominance of the 
         *      underlying sinus (which enforces trend behaviour)?
         *    - How does the performance of the strategy depend on price volatility?
         *    - How does the performance of the strategy depend on the fast MA window?
         *    - How does the performance of the strategy depend on the size of the exit channel?
         * 
         * ######################################################################################
         */
        
        logger.trace("Performance of the trend strategy under changing price volatility"
                + " for three multiplier types: constant, slope, slope difference");
        
        /**
         *      SET-UP
         */
        logger.trace("Setting up test objects and parameters");
        
        int lengthOfTs = 5000;
        int startSeed = -1;
        
        /*
         * Setting up the normal random generator and the sinus generator, 
         * and generate arrays of Brownian motion and sinus values
         */
        double mu = 0;
        double sigmaMin = 1;
        double sigmaMax = 20;
        double sigma;
        
        double shift = 100;
        double amplitude = 20;
        double lag = 0;
        double lambda = 80;
        
        int runsPerExperiment = 10;
        
        VersatileChart charts = new VersatileChart();
        charts.getInternalParms().autoRange = true;
        charts.getInternalParms().autoRangePadding = 0;
        charts.getInternalParms().ticks = true;
        VersatileTimeSeriesCollection atc = new VersatileTimeSeriesCollection("Wealth for sigma [" + sigmaMin + "," + sigmaMax + "]");

        /**
         *      SIMULATION EXPERIMENT
         *      =====================     
         */
        
        for (int run = 0; run < runsPerExperiment; run++) {
            
            WorldClock.reset();
            
            if (runsPerExperiment == 1)
                sigma = sigmaMin;
            else
                sigma = sigmaMin + run * (sigmaMax - sigmaMin) / (runsPerExperiment - 1);
    
            if (startSeed == -1)
                RandomGeneratorPool.configureGeneratorPool();
            else
                RandomGeneratorPool.configureGeneratorPool(startSeed);

            RandomDistDataGenerator randGen = new RandomDistDataGenerator("gen", DistributionType.NORMAL, mu, sigma);
            SinusDataGenerator sinusGen = new SinusDataGenerator(shift, amplitude, lag, lambda);
            
            DoubleArrayList dalRandValues = randGen.nextDoubles(lengthOfTs);
            DoubleArrayList dalSinusValues = sinusGen.nextDoubles(lengthOfTs);
            
            /*
             * Setting up the trend strategy
             */
            int maShortTicks = 10;
            int maLongTicks = 40;
            int bcTicks = 10;
            double capFactor = 10;
            
            DoubleTimeSeries brownianPlusSinusTs = new DoubleTimeSeries();
            DoubleTimeSeries wealth = new DoubleTimeSeries("wealth");
            
            TrendMABCStrategy_old trend = new TrendMABCStrategy_old("share", maShortTicks, maLongTicks, bcTicks, capFactor, brownianPlusSinusTs, 0, Multiplier.MA_SLOPE_DIFFERENCE);
                    
            /*
             * Running the trading simulation with the trend strategy 
             */
            int tick = WorldClock.currentTick();
            
            double brownianValue = dalRandValues.get(tick);
        	brownianPlusSinusTs.add(tick, brownianValue + dalSinusValues.get(tick));  // price at t = 0
        	wealth.add(tick, 0);
        	
            trend.trade();  // position at t = 0
            
            tick = WorldClock.incrementTick();
            
            for (int i = 1; i < lengthOfTs; i++) {
                
            	brownianValue += dalRandValues.get(tick);
                brownianPlusSinusTs.add(tick, brownianValue + dalSinusValues.get(tick));    // price at t = i
            	trend.trade();  // position at t = i
                
                double deltaWealth = trend.getTsPos().get(tick) * (brownianPlusSinusTs.get(tick) - brownianPlusSinusTs.get(tick - 1));
                wealth.add(tick, wealth.get(tick - 1) + deltaWealth);
                
                tick = WorldClock.incrementTick();
            }

            /*
             * Printing and graphing the results
             */
            logger.debug("Positions: {}", VersatileTimeSeries.printValues(trend.getTsPos()));
            
            atc.populateSeries(run, wealth.getId(), wealth);
            
//            charts.draw(new VersatileTimeSeries("Brownian + Sinus (r = " + run + ")", brownianPlusSinusTs),  
//                    new VersatileTimeSeries("Positions (r = " + run + ")", trend.getTsPos()));
//            charts.draw(new VersatileTimeSeries("Wealth (r = " + run + ")", wealth));
        }
        
        charts.draw(atc);

                
        /**
         *      OUTPUT
         */
        
        logger.debug("----- END OF SIMULATION EXPERIMENT -----\n");
        
    }

}
